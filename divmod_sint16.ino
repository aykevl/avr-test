// Copyright 2022 Ben Shi. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This program tests my software sint16 division function divmodhi4
// against libgcc's implementation.

// LLVM Differential Revision: https://reviews.llvm.org/D124600

__attribute__((naked)) long divmodhi4(int a, int b) {
  __asm__ __volatile__ (
      "\tbst     r25, 7\n"
      "\tmov     r0, r23\n"
      "\tbrtc    divmodhi4_a\n"
      "\tcom     r0\n"
      "\trcall   divmodhi4_b\n"
      "\n"
      "divmodhi4_a:\n"
      "\tsbrc    r23, 7\n"
      "\trcall   divmodhi4_c\n"
      "\trcall   __udivmodhi4 ; Call __udivmodhi4 to do real calculation.\n"
      "\tsbrc    r0, 7\n"
      "\trcall   divmodhi4_c\n"
      "\tbrtc    divmodhi4_exit\n"
      "\n"
      "divmodhi4_b:\n"
      "\tcom     r25\n"
      "\tneg     r24\n"
      "\tsbci    r25, 255\n"
      "\tret                  ; Return quotient via R23:R22 and remainder via R25:R24.\n"
      "\n"
      "divmodhi4_c:\n"
      "\tcom     r23\n"
      "\tneg     r22\n"
      "\tsbci    r23, 255\n"
      "\n"
      "divmodhi4_exit:\n"
      "\tret                  ; Return quotient via R23:R22 and remainder via R25:r24.");
}

int arr0[] = {-20474, -19540, 28299, -22773, -29805, -5411, 1164, -2733, 31161, 7364, 15429, -29621, 5642, 26392, -12410, -3917, 32101, 96, -1777, -32398, 15583, -26614, -25213, 17754, -2288, -31880, -27452, 13378, 24547, -29292, 6853, -28694, -16064, 2386, 14068, -13101, 29743, -17534, -15834, 28138, -10170, 32363, -1483, 28240, -6780, 18875, 24324, -7445, 18971, -10220, 25692, 1787, 28701, 479, 19541, -6353, -31400, 24858, 7025, 25915, 28334, -18888, -2778, 12270, -16502, -21477, 31937, 13241, 26524, 16103, -24156, -16412, 15699, 7129, -20939, -23847, 26005, -29382, -31292, -20559, 25934, -5600, 13997, -10900, 27648, 771, 15515, -3752, 25629, 22541, -10604, -11572, -29114, 19386, -32069, 19919, -2090, 32636, 393, -8333, -16796, 9006, -24745, 31672, 16135, 19852, 7825, -23395, -9530, -23467, -11185, -16363, 3701, 2812, 5506, 31349, -29184, 21021, 27597, -3554, -21973, -15773, 17642, -18319, 3613, 18342, -31167, 1523, -14557, -30773, -6809, 1416, 11001, 1214, -32447, -5631, -11701, -24622, 3743, 11538, -15321, 25326, -4825, -11620, -4629, 681, 19730, 31722, 21703, 14560, 28168, 32498, 31555, 13044, 14180, -30366, 31386, -16987, 3925, 16829, -14992, -2884, 18245, 28777, 31099, -14202, -9620, 19398, -6056, -5877, 30936, 11391, 19449, 26112, -228, -17947, -5974, -13265, 13775, 15729, -31472, 9177, -17307, -32683, 22221, 29641, 2486, -11928, -20113, 6411, 4901, -2336, -29239, 23147, 26441, 1860, -23822, 16821, -11509, 2891, -21823, 19428, 14282, 30394, 12773, -18713, 12447, 6799, 790, 26223, 22529, 2087, -30135, -27545, -30596, -7914, -30671, -28110, 12926, 14751, 11069, 17827, 12415, -18170, 8207, -26678, 16458, 17154, 22911, 4950, 20045, 1089, -8389, 1560, -1284, 4384, -17152, 11164, 11183, -16362, 4620, 945, -14275, 7253, -26600, 20664, 32107, 8264, 25322, -20502, -9751, -29143, 30093, 2664, -14545, -27234, 8754, -30853, 22688, 31666, 6865, -22802, -12, -1524, -21242, -1296, 2860, -5626, -22899, 14043, -21987, 14489, -17778, -3494, 21742, 21157, -15596, -11686, -3345, 9726, -32188, -13096, 13351, -2094, 22336, 31575, 3440, 31091, 722, 26128, 29990, 7587, -29441, 29978, 6063, -17915, -4085, -23844, -23540, 5785};
int arr1[] = {-1722, 1297, 790, 555, 526, 933, -314, -1540, -110, 271, -1315, 1273, 1028, 1896, 42, 819, 1589, 55, -715, -1979, 241, 2028, -1899, 1625, -266, -133, 788, 630, 1178, -649, 378, 1376, -1528, -1008, -117, 1046, 1972, 1488, 1553, -313, -289, -1938, -1088, -1437, 2006, 1001, 1430, 1419, -992, -1333, 1488, 1168, -1480, 1508, 745, 173, -800, -643, -1245, -1670, 628, 1052, 1753, 1147, -2003, -539, 17, 2016, -1099, -477, -345, 532, -496, 614, 1142, -538, -561, 396, -1294, 366, 1111, -1982, -514, 1550, 1573, -1945, -325, -1403, -668, 350, -1153, 2007, -646, -1576, 1106, -602, -68, -924, -761, 753, 518, 813, -763, 1941, -748, -1797, -772, 738, 647, -19, -943, -290, 46, 462, -916, -557, 437, 678, 88, 1816, -1020, 854, 1775, 254, 1325, 705, 1571, -790, 1700, -1238, 1882, 42, 1623, -929, -64, -1173, -679, 1211, 1484, 2015, -984, -1507, -451, 1109, 875, 552, -1624, -736, -817, 383, -968, 210, -811, -1369, -1584, -1533, 1255, 2035, -404, 780, -1379, -570, -1354, -1932, 420, 629, -1058, 1788, -336, -1621, 1628, 727, -1209, -999, -340, 1713, 1601, 84, -1199, -1392, -1581, -248, 865, -344, 302, 1201, 170, -618, 1060, 1685, -1886, 1728, -933, -1193, 1844, 1534, 1356, -1390, 1146, -1028, -1092, 598, 1619, -381, 1519, -769, -844, 944, 1362, 5, 1599, 1829, 1804, 416, -691, -69, -559, 1398, 1360, -1547, 1035, 1393, -1994, -1946, -1976, 1897, 1507, 1427, -1669, 605, -1776, -713, -972, 1890, 825, -1501, -927, 2028, 1490, -1740, -15, 1041, 2008, -386, -719, -731, 1464, 642, -1381, 776, 1142, 1701, 121, 1067, 1674, 192, 788, 1133, -556, 1167, -438, -285, -1722, 637, -571, 1150, 1055, 421, 1002, 497, 728, -1060, -638, 560, 473, 563, 1876, -111, -843, -1681, -1511, -1877, 1939, 529, 1238, 1565, -1455, -22, 522, 36, -1031, -1963, 1670, -834, 593, -1077, -1860, -399, 1392, 1190};

void setup(void) {
  Serial.begin(115200);         // Initialize the communication port.
}

void loop(void) {
  unsigned i;
  for (i = 0; i < sizeof(arr0) / sizeof(*arr0); i++) {
    // Test sint8 div.
    volatile int i0 = arr0[i] / arr1[i];
    volatile int i1 = divmodhi4(arr0[i], arr1[i]);
    Serial.println(i0 == i1 ? "sint16 div correct" : "sint16 div incorrect");

    // Test sint8 mod.
    volatile int j0 = arr0[i] % arr1[i];
    volatile int j1 = divmodhi4(arr0[i], arr1[i]) >> 16;
    Serial.println(j0 == j1 ? "sint16 mod correct" : "sint16 mod incorrect");

    delay(100);
  }
}
