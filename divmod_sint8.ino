// Copyright 2022 Ben Shi. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This program tests my software sint8 division function divmodqi4
// against libgcc's implementation.

// LLVM Differential Revision: https://reviews.llvm.org/D124600

extern "C" {

signed char arr0[] = {};
signed char arr1[] = {-7, 11, -13, 2, 2, -16, 8, -12, -16, 3, 3, -13, -11, 3, 12, 10, -16, -12, -9, 1, -3, 11, -5, -14, -1, 12, -14, -9, -3, 2, -7, 3, -14, 11, 4, 8, 14, 2, -4, 3, 13, 6, -8, 8, -1, -10, 10, 4, 7, -8, 1, -15, -5, 14, 14, -5, -10, -4, 13, 5, 4, 1, 7, -2, -12, -3, 6, 13, 12, -5, 9, 3, 1, -15, 7, -5, 5, -3, 3, -11, -2, 12, -12, -5, -8, -7, 8, -12, 12, -5, 6, 4, 9, 8, -13, -10, 14, -13, 9, 6, 4, -5, -9, 3, -15, 2, -7, -2, -11, -1, 10, -16, 1, -9, -9, 10, 13, -5, 7, -7, -16, -6, -13, 9, -4, -9, -8, -7, -8, -14, -15, 12, -5, -8, -2, -4, 9, 8, 8, 12, -10, 3, 12, 5, 10, -12, 1, 8, -2, -9, -16, -2, -14, -10, 12, -7, -2, -10, 2, -2, -11, -3, 9, -4, 12, -10, -10, 3, 12, -13, 7, 1, 13, -3, -6, -15, 12, -14, -1, -11, -14, 11, 3, -12, -13, -2, -4, -1, 4, 12, 14, 8, -6, 6, -11, -11, 13, -7, 6, 8, -6, -2, -6, -8, 12, 3, -7, 7, 5, 8, 10, 5, 3, -2, 10, 4, 12, -11, -12, -14, -15, -7, -6, 8, -4, 4, 5, -9, -3, -16, 4, 6, -10, -1, -6, -9, -16, -9, -15, 5, 10, -1, -2, -3, -5, 1, 2, 11, 3, 1, -13, 14, -6, -3, -3, 12, -13, 2, -5, -15, -9, -16, -9, 4, -6, 5, 10, -8, 11, 11, 11, 4, -5, -5, -13, 4, 12, 3, -1, -11, 1, -4, -2, 14, 7, -5, -16, -6, 4, 14, 4, -11, -11, 12, 8, 13, -11, 4, 9, -14, -6, -10, -5, -3, 8, -10, -15, -6, 5, -12, 9, -16, 7, 7, 10, 5, -13, -3, 3, 1, -13, 8, 4, 13, -1, 3, -12, -11, -3, -10, -1, 1, -1, 10, -5, 5, 9, 3, -6, 13, -5, -6, -3, -13, -13, -8, 7, -12, 5, -5, 5, 6, -14, -6, 5, 1, 11, 9, 6, -6, 13, -12, 9, -3, 12, -11, -13, 6, 6, -5, 3, -13, 6, -15, -10, 9, -7, 13, 13, 12, -9, 1, 4, -7, 9, -6, 11, 6, -14, -15, -16, 3, 10, -5, 14, -4, -10, 5, 8, 9, 8, -1, 8, 13, -9, -14, 9, -13, 14, -16, 4, 1, -7, -2, 11, -13, -11, 13, 2, -12, 11, -10, 13, -11, 4, 10, 2, 10, -2, -5, 4, -8, 8, -3, -12, -16, -3, 11, -15, -5, 11, 5, 12, -12, -14, 7, -9, -10, 3, 9, -8, 13, -10, 5, 3, 14, -10, -2, -2, -1, -14, 4, -8, -3, 6, -10, 9, 2, -9, -13, -3, 10, -16, 1, 13, 5, 8, -14, -6, 1, -6, 8, -1, -1, -2, -13, -2, 5, 10, -11, 2, -1, -4, 13, -10, 2, 7, 9, 8, 10};

__attribute__((naked)) __attribute__((noinline)) unsigned int udivmodqi4(unsigned char a, unsigned char b) { 
  __asm__ __volatile__ (
      "\tsub     r25, r25           ; Initialize the remainder to zero.\n"
      "\tldi     r23, 9             ; Only loop 8 rounds for uint8.\n"
      "\n"
      "udivmodqi4_loop:\n"
      "\tadc     r24, r24\n"
      "\tdec     r23\n"
      "\tbreq    udivmodqi4_end\n"
      "\tadc     r25, r25\n"
      "\tcp      r25, r22           ; Compare with the divisor.\n"
      "\tbrcs    udivmodqi4_loop\n"
      "\tsub     r25, r22           ; Subtract the divisor.\n"
      "\trjmp    udivmodqi4_loop\n"
      "\n"
      "udivmodqi4_end:\n"
      "\tcom     r24                ; The uint8 quotient is returned via R24.\n"
      "\tret                        ; The uint8 remainder is returned via R25.");
}

__attribute__((naked)) __attribute__((noinline)) unsigned int divmodqi4(signed char a, signed char b) {
  __asm__ __volatile__ (
      "\tbst     r24, 7\n"
      "\tmov     r0, r24\n"
      "\teor     r0, r22\n"
      "\tsbrc    r24, 7\n"
      "\tneg     r24\n"
      "\tsbrc    r22, 7\n"
      "\tneg     r22\n"
      "\trcall   udivmodqi4         ; Call udivmodqi4 to do real calculation.\n"
      "\tbrtc    divmodqi4_1\n"
      "\tneg     r25\n"
      "\n"
      "divmodqi4_1:\n"
      "\tsbrc    r0, 7\n"
      "\tneg     r24\n"
      "\tret                        ; Return quotient via R24 and remainder via R25.\n");
}

} // extern "C"

unsigned int libgcc(signed char i, signed char j) {
  unsigned int d = (unsigned int) (unsigned char) (i / j);
  unsigned int m = (unsigned int) (unsigned char) (i % j);
  return (m << 8) | d;
}

void setup(void) {
  // put your setup code here, to run once:
  Serial.begin(115200);         // Initialize the communication port.
  volatile int r;
  r = divmodqi4(73, 19);        // Placeholder to avoid LTO eliminates divmodqi4.
  r = udivmodqi4(67, 7);        // Placeholder to avoid LTO eliminates udivmodqi4.
}

void loop() {
  unsigned int i;
  for (i = 0; i < sizeof(arr0) / sizeof(*arr0); i++) {        
    unsigned int r0 = libgcc(arr0[i], arr1[i]);
    unsigned int r1 = divmodqi4(arr0[i], arr1[i]);
    Serial.println(r0 == r1 ? "sint8 div & mod correct" : "sint8 div & mod incorrect");
    delay(100);
  }
}
